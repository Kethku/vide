#include "common.wgsl"
#include "glyph.wgsl"

var<push_constant> constants: ShaderConstants;

@group(0) @binding(0) var<storage> glyphs: array<InstancedGlyph>;

struct VertexOutput {
    @builtin(position) position: vec4<f32>,
    @location(0) instance_index: u32,
    @location(1) atlas_position: vec2<f32>,
}

@vertex
fn main(
    @builtin(instance_index) instance_index: u32,
    @builtin(vertex_index) vertex_index: u32,
) -> VertexOutput {
    var UNIT_QUAD_VERTICES: array<vec2<f32>, 6> = array<vec2<f32>, 6>(
        vec2(0.0, 0.0),
        vec2(1.0, 0.0),
        vec2(1.0, 1.0),
        vec2(0.0, 0.0),
        vec2(1.0, 1.0),
        vec2(0.0, 1.0)
    );

    let unit_vertex_pos = UNIT_QUAD_VERTICES[vertex_index];
    let instance = glyphs[instance_index];
    let vertex_pixel_pos = instance.bottom_left + (unit_vertex_pos - vec2(0., 1.)) * instance.atlas_size;
    
    let final_position = vec2(0.0, 2.0) + vertex_pixel_pos / constants.surface_size * vec2(1., -1.) * 2.0 - 1.0;

    var out: VertexOutput;
    out.position = vec4(final_position, 0.0, 1.0);
    out.instance_index = instance_index;
    out.atlas_position = instance.atlas_top_left / constants.atlas_size
        + unit_vertex_pos * instance.atlas_size / constants.atlas_size;
    return out;
}
